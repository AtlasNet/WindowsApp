/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class AtlasNode {
  public interface Iface {
    int ping();
    #if SILVERLIGHT
    IAsyncResult Begin_ping(AsyncCallback callback, object state);
    int End_ping(IAsyncResult asyncResult);
    #endif
    AtlasNodeInfo getInfo();
    #if SILVERLIGHT
    IAsyncResult Begin_getInfo(AsyncCallback callback, object state);
    AtlasNodeInfo End_getInfo(IAsyncResult asyncResult);
    #endif
    void hello(AtlasNodeInfo info);
    #if SILVERLIGHT
    IAsyncResult Begin_hello(AsyncCallback callback, object state, AtlasNodeInfo info);
    void End_hello(IAsyncResult asyncResult);
    #endif
    void join();
    #if SILVERLIGHT
    IAsyncResult Begin_join(AsyncCallback callback, object state);
    void End_join(IAsyncResult asyncResult);
    #endif
    void registerNode(AtlasNodeInfo info, AtlasNodeInfo via);
    #if SILVERLIGHT
    IAsyncResult Begin_registerNode(AsyncCallback callback, object state, AtlasNodeInfo info, AtlasNodeInfo via);
    void End_registerNode(IAsyncResult asyncResult);
    #endif
    List<AtlasNodeInfo> getKnownNodes();
    #if SILVERLIGHT
    IAsyncResult Begin_getKnownNodes(AsyncCallback callback, object state);
    List<AtlasNodeInfo> End_getKnownNodes(IAsyncResult asyncResult);
    #endif
    void postMessage(AtlasMessage message);
    #if SILVERLIGHT
    IAsyncResult Begin_postMessage(AsyncCallback callback, object state, AtlasMessage message);
    void End_postMessage(IAsyncResult asyncResult);
    #endif
    void registerMessageListing(string recipientKey, long messageId);
    #if SILVERLIGHT
    IAsyncResult Begin_registerMessageListing(AsyncCallback callback, object state, string recipientKey, long messageId);
    void End_registerMessageListing(IAsyncResult asyncResult);
    #endif
    void unregisterMessageListing(long messageId);
    #if SILVERLIGHT
    IAsyncResult Begin_unregisterMessageListing(AsyncCallback callback, object state, long messageId);
    void End_unregisterMessageListing(IAsyncResult asyncResult);
    #endif
    string getAuthChallenge(string publicKey);
    #if SILVERLIGHT
    IAsyncResult Begin_getAuthChallenge(AsyncCallback callback, object state, string publicKey);
    string End_getAuthChallenge(IAsyncResult asyncResult);
    #endif
    long confirmAuth(string response);
    #if SILVERLIGHT
    IAsyncResult Begin_confirmAuth(AsyncCallback callback, object state, string response);
    long End_confirmAuth(IAsyncResult asyncResult);
    #endif
    List<AtlasListing> getListings();
    #if SILVERLIGHT
    IAsyncResult Begin_getListings(AsyncCallback callback, object state);
    List<AtlasListing> End_getListings(IAsyncResult asyncResult);
    #endif
    long hasMessage(long id);
    #if SILVERLIGHT
    IAsyncResult Begin_hasMessage(AsyncCallback callback, object state, long id);
    long End_hasMessage(IAsyncResult asyncResult);
    #endif
    AtlasMessage retrieveMessage(long id);
    #if SILVERLIGHT
    IAsyncResult Begin_retrieveMessage(AsyncCallback callback, object state, long id);
    AtlasMessage End_retrieveMessage(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_ping(AsyncCallback callback, object state)
    {
      return send_ping(callback, state);
    }

    public int End_ping(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ping();
    }

    #endif

    public int ping()
    {
      #if !SILVERLIGHT
      send_ping();
      return recv_ping();

      #else
      var asyncResult = Begin_ping(null, null);
      return End_ping(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ping(AsyncCallback callback, object state)
    #else
    public void send_ping()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
      ping_args args = new ping_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_ping()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ping_result result = new ping_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getInfo(AsyncCallback callback, object state)
    {
      return send_getInfo(callback, state);
    }

    public AtlasNodeInfo End_getInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getInfo();
    }

    #endif

    public AtlasNodeInfo getInfo()
    {
      #if !SILVERLIGHT
      send_getInfo();
      return recv_getInfo();

      #else
      var asyncResult = Begin_getInfo(null, null);
      return End_getInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getInfo(AsyncCallback callback, object state)
    #else
    public void send_getInfo()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getInfo", TMessageType.Call, seqid_));
      getInfo_args args = new getInfo_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public AtlasNodeInfo recv_getInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getInfo_result result = new getInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_hello(AsyncCallback callback, object state, AtlasNodeInfo info)
    {
      return send_hello(callback, state, info);
    }

    public void End_hello(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_hello();
    }

    #endif

    public void hello(AtlasNodeInfo info)
    {
      #if !SILVERLIGHT
      send_hello(info);
      recv_hello();

      #else
      var asyncResult = Begin_hello(null, null, info);
      End_hello(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_hello(AsyncCallback callback, object state, AtlasNodeInfo info)
    #else
    public void send_hello(AtlasNodeInfo info)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("hello", TMessageType.Call, seqid_));
      hello_args args = new hello_args();
      args.Info = info;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_hello()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      hello_result result = new hello_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_join(AsyncCallback callback, object state)
    {
      return send_join(callback, state);
    }

    public void End_join(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_join();
    }

    #endif

    public void join()
    {
      #if !SILVERLIGHT
      send_join();
      recv_join();

      #else
      var asyncResult = Begin_join(null, null);
      End_join(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_join(AsyncCallback callback, object state)
    #else
    public void send_join()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("join", TMessageType.Call, seqid_));
      join_args args = new join_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_join()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      join_result result = new join_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_registerNode(AsyncCallback callback, object state, AtlasNodeInfo info, AtlasNodeInfo via)
    {
      return send_registerNode(callback, state, info, via);
    }

    public void End_registerNode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_registerNode();
    }

    #endif

    public void registerNode(AtlasNodeInfo info, AtlasNodeInfo via)
    {
      #if !SILVERLIGHT
      send_registerNode(info, via);
      recv_registerNode();

      #else
      var asyncResult = Begin_registerNode(null, null, info, via);
      End_registerNode(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerNode(AsyncCallback callback, object state, AtlasNodeInfo info, AtlasNodeInfo via)
    #else
    public void send_registerNode(AtlasNodeInfo info, AtlasNodeInfo via)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("registerNode", TMessageType.Call, seqid_));
      registerNode_args args = new registerNode_args();
      args.Info = info;
      args.Via = via;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_registerNode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerNode_result result = new registerNode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getKnownNodes(AsyncCallback callback, object state)
    {
      return send_getKnownNodes(callback, state);
    }

    public List<AtlasNodeInfo> End_getKnownNodes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getKnownNodes();
    }

    #endif

    public List<AtlasNodeInfo> getKnownNodes()
    {
      #if !SILVERLIGHT
      send_getKnownNodes();
      return recv_getKnownNodes();

      #else
      var asyncResult = Begin_getKnownNodes(null, null);
      return End_getKnownNodes(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getKnownNodes(AsyncCallback callback, object state)
    #else
    public void send_getKnownNodes()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getKnownNodes", TMessageType.Call, seqid_));
      getKnownNodes_args args = new getKnownNodes_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<AtlasNodeInfo> recv_getKnownNodes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getKnownNodes_result result = new getKnownNodes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getKnownNodes failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_postMessage(AsyncCallback callback, object state, AtlasMessage message)
    {
      return send_postMessage(callback, state, message);
    }

    public void End_postMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_postMessage();
    }

    #endif

    public void postMessage(AtlasMessage message)
    {
      #if !SILVERLIGHT
      send_postMessage(message);
      recv_postMessage();

      #else
      var asyncResult = Begin_postMessage(null, null, message);
      End_postMessage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_postMessage(AsyncCallback callback, object state, AtlasMessage message)
    #else
    public void send_postMessage(AtlasMessage message)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("postMessage", TMessageType.Call, seqid_));
      postMessage_args args = new postMessage_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_postMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      postMessage_result result = new postMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_registerMessageListing(AsyncCallback callback, object state, string recipientKey, long messageId)
    {
      return send_registerMessageListing(callback, state, recipientKey, messageId);
    }

    public void End_registerMessageListing(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_registerMessageListing();
    }

    #endif

    public void registerMessageListing(string recipientKey, long messageId)
    {
      #if !SILVERLIGHT
      send_registerMessageListing(recipientKey, messageId);
      recv_registerMessageListing();

      #else
      var asyncResult = Begin_registerMessageListing(null, null, recipientKey, messageId);
      End_registerMessageListing(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerMessageListing(AsyncCallback callback, object state, string recipientKey, long messageId)
    #else
    public void send_registerMessageListing(string recipientKey, long messageId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("registerMessageListing", TMessageType.Call, seqid_));
      registerMessageListing_args args = new registerMessageListing_args();
      args.RecipientKey = recipientKey;
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_registerMessageListing()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerMessageListing_result result = new registerMessageListing_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_unregisterMessageListing(AsyncCallback callback, object state, long messageId)
    {
      return send_unregisterMessageListing(callback, state, messageId);
    }

    public void End_unregisterMessageListing(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_unregisterMessageListing();
    }

    #endif

    public void unregisterMessageListing(long messageId)
    {
      #if !SILVERLIGHT
      send_unregisterMessageListing(messageId);
      recv_unregisterMessageListing();

      #else
      var asyncResult = Begin_unregisterMessageListing(null, null, messageId);
      End_unregisterMessageListing(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_unregisterMessageListing(AsyncCallback callback, object state, long messageId)
    #else
    public void send_unregisterMessageListing(long messageId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("unregisterMessageListing", TMessageType.Call, seqid_));
      unregisterMessageListing_args args = new unregisterMessageListing_args();
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_unregisterMessageListing()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      unregisterMessageListing_result result = new unregisterMessageListing_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAuthChallenge(AsyncCallback callback, object state, string publicKey)
    {
      return send_getAuthChallenge(callback, state, publicKey);
    }

    public string End_getAuthChallenge(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAuthChallenge();
    }

    #endif

    public string getAuthChallenge(string publicKey)
    {
      #if !SILVERLIGHT
      send_getAuthChallenge(publicKey);
      return recv_getAuthChallenge();

      #else
      var asyncResult = Begin_getAuthChallenge(null, null, publicKey);
      return End_getAuthChallenge(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAuthChallenge(AsyncCallback callback, object state, string publicKey)
    #else
    public void send_getAuthChallenge(string publicKey)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAuthChallenge", TMessageType.Call, seqid_));
      getAuthChallenge_args args = new getAuthChallenge_args();
      args.PublicKey = publicKey;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getAuthChallenge()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAuthChallenge_result result = new getAuthChallenge_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAuthChallenge failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_confirmAuth(AsyncCallback callback, object state, string response)
    {
      return send_confirmAuth(callback, state, response);
    }

    public long End_confirmAuth(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_confirmAuth();
    }

    #endif

    public long confirmAuth(string response)
    {
      #if !SILVERLIGHT
      send_confirmAuth(response);
      return recv_confirmAuth();

      #else
      var asyncResult = Begin_confirmAuth(null, null, response);
      return End_confirmAuth(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_confirmAuth(AsyncCallback callback, object state, string response)
    #else
    public void send_confirmAuth(string response)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("confirmAuth", TMessageType.Call, seqid_));
      confirmAuth_args args = new confirmAuth_args();
      args.Response = response;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_confirmAuth()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      confirmAuth_result result = new confirmAuth_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "confirmAuth failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getListings(AsyncCallback callback, object state)
    {
      return send_getListings(callback, state);
    }

    public List<AtlasListing> End_getListings(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getListings();
    }

    #endif

    public List<AtlasListing> getListings()
    {
      #if !SILVERLIGHT
      send_getListings();
      return recv_getListings();

      #else
      var asyncResult = Begin_getListings(null, null);
      return End_getListings(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getListings(AsyncCallback callback, object state)
    #else
    public void send_getListings()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getListings", TMessageType.Call, seqid_));
      getListings_args args = new getListings_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<AtlasListing> recv_getListings()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getListings_result result = new getListings_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getListings failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_hasMessage(AsyncCallback callback, object state, long id)
    {
      return send_hasMessage(callback, state, id);
    }

    public long End_hasMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_hasMessage();
    }

    #endif

    public long hasMessage(long id)
    {
      #if !SILVERLIGHT
      send_hasMessage(id);
      return recv_hasMessage();

      #else
      var asyncResult = Begin_hasMessage(null, null, id);
      return End_hasMessage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_hasMessage(AsyncCallback callback, object state, long id)
    #else
    public void send_hasMessage(long id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("hasMessage", TMessageType.Call, seqid_));
      hasMessage_args args = new hasMessage_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_hasMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      hasMessage_result result = new hasMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hasMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_retrieveMessage(AsyncCallback callback, object state, long id)
    {
      return send_retrieveMessage(callback, state, id);
    }

    public AtlasMessage End_retrieveMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_retrieveMessage();
    }

    #endif

    public AtlasMessage retrieveMessage(long id)
    {
      #if !SILVERLIGHT
      send_retrieveMessage(id);
      return recv_retrieveMessage();

      #else
      var asyncResult = Begin_retrieveMessage(null, null, id);
      return End_retrieveMessage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_retrieveMessage(AsyncCallback callback, object state, long id)
    #else
    public void send_retrieveMessage(long id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("retrieveMessage", TMessageType.Call, seqid_));
      retrieveMessage_args args = new retrieveMessage_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public AtlasMessage recv_retrieveMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      retrieveMessage_result result = new retrieveMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveMessage failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["ping"] = ping_Process;
      processMap_["getInfo"] = getInfo_Process;
      processMap_["hello"] = hello_Process;
      processMap_["join"] = join_Process;
      processMap_["registerNode"] = registerNode_Process;
      processMap_["getKnownNodes"] = getKnownNodes_Process;
      processMap_["postMessage"] = postMessage_Process;
      processMap_["registerMessageListing"] = registerMessageListing_Process;
      processMap_["unregisterMessageListing"] = unregisterMessageListing_Process;
      processMap_["getAuthChallenge"] = getAuthChallenge_Process;
      processMap_["confirmAuth"] = confirmAuth_Process;
      processMap_["getListings"] = getListings_Process;
      processMap_["hasMessage"] = hasMessage_Process;
      processMap_["retrieveMessage"] = retrieveMessage_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ping_args args = new ping_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ping_result result = new ping_result();
      result.Success = iface_.ping();
      oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getInfo_args args = new getInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getInfo_result result = new getInfo_result();
      result.Success = iface_.getInfo();
      oprot.WriteMessageBegin(new TMessage("getInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void hello_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      hello_args args = new hello_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      hello_result result = new hello_result();
      iface_.hello(args.Info);
      oprot.WriteMessageBegin(new TMessage("hello", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void join_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      join_args args = new join_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      join_result result = new join_result();
      iface_.join();
      oprot.WriteMessageBegin(new TMessage("join", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerNode_args args = new registerNode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerNode_result result = new registerNode_result();
      iface_.registerNode(args.Info, args.Via);
      oprot.WriteMessageBegin(new TMessage("registerNode", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getKnownNodes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getKnownNodes_args args = new getKnownNodes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getKnownNodes_result result = new getKnownNodes_result();
      result.Success = iface_.getKnownNodes();
      oprot.WriteMessageBegin(new TMessage("getKnownNodes", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void postMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      postMessage_args args = new postMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      postMessage_result result = new postMessage_result();
      iface_.postMessage(args.Message);
      oprot.WriteMessageBegin(new TMessage("postMessage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerMessageListing_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerMessageListing_args args = new registerMessageListing_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerMessageListing_result result = new registerMessageListing_result();
      iface_.registerMessageListing(args.RecipientKey, args.MessageId);
      oprot.WriteMessageBegin(new TMessage("registerMessageListing", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void unregisterMessageListing_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unregisterMessageListing_args args = new unregisterMessageListing_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unregisterMessageListing_result result = new unregisterMessageListing_result();
      iface_.unregisterMessageListing(args.MessageId);
      oprot.WriteMessageBegin(new TMessage("unregisterMessageListing", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAuthChallenge_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAuthChallenge_args args = new getAuthChallenge_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAuthChallenge_result result = new getAuthChallenge_result();
      result.Success = iface_.getAuthChallenge(args.PublicKey);
      oprot.WriteMessageBegin(new TMessage("getAuthChallenge", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void confirmAuth_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      confirmAuth_args args = new confirmAuth_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      confirmAuth_result result = new confirmAuth_result();
      result.Success = iface_.confirmAuth(args.Response);
      oprot.WriteMessageBegin(new TMessage("confirmAuth", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getListings_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getListings_args args = new getListings_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getListings_result result = new getListings_result();
      result.Success = iface_.getListings();
      oprot.WriteMessageBegin(new TMessage("getListings", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void hasMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      hasMessage_args args = new hasMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      hasMessage_result result = new hasMessage_result();
      result.Success = iface_.hasMessage(args.Id);
      oprot.WriteMessageBegin(new TMessage("hasMessage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void retrieveMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      retrieveMessage_args args = new retrieveMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      retrieveMessage_result result = new retrieveMessage_result();
      result.Success = iface_.retrieveMessage(args.Id);
      oprot.WriteMessageBegin(new TMessage("retrieveMessage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class ping_args : TBase
  {

    public ping_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ping_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class ping_result : TBase
  {
    private int _success;

    [DataMember]
    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool success;
    }

    public ping_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ping_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class getInfo_args : TBase
  {

    public getInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getInfo_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getInfo_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class getInfo_result : TBase
  {
    private AtlasNodeInfo _success;

    [DataMember]
    public AtlasNodeInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool success;
    }

    public getInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new AtlasNodeInfo();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getInfo_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getInfo_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class hello_args : TBase
  {
    private AtlasNodeInfo _info;

    [DataMember]
    public AtlasNodeInfo Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool info;
    }

    public hello_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Info = new AtlasNodeInfo();
              Info.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("hello_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Info != null && __isset.info) {
        field.Name = "info";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Info.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("hello_args(");
      sb.Append("Info: ");
      sb.Append(Info== null ? "<null>" : Info.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class hello_result : TBase
  {

    public hello_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("hello_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("hello_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class join_args : TBase
  {

    public join_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("join_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("join_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class join_result : TBase
  {

    public join_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("join_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("join_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class registerNode_args : TBase
  {
    private AtlasNodeInfo _info;
    private AtlasNodeInfo _via;

    [DataMember]
    public AtlasNodeInfo Info
    {
      get
      {
        return _info;
      }
      set
      {
        __isset.info = true;
        this._info = value;
      }
    }

    [DataMember]
    public AtlasNodeInfo Via
    {
      get
      {
        return _via;
      }
      set
      {
        __isset.via = true;
        this._via = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool info;
      public bool via;
    }

    public registerNode_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Info = new AtlasNodeInfo();
              Info.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Via = new AtlasNodeInfo();
              Via.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("registerNode_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Info != null && __isset.info) {
        field.Name = "info";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Info.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Via != null && __isset.via) {
        field.Name = "via";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Via.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("registerNode_args(");
      sb.Append("Info: ");
      sb.Append(Info== null ? "<null>" : Info.ToString());
      sb.Append(",Via: ");
      sb.Append(Via== null ? "<null>" : Via.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class registerNode_result : TBase
  {

    public registerNode_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("registerNode_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("registerNode_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class getKnownNodes_args : TBase
  {

    public getKnownNodes_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getKnownNodes_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getKnownNodes_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class getKnownNodes_result : TBase
  {
    private List<AtlasNodeInfo> _success;

    [DataMember]
    public List<AtlasNodeInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool success;
    }

    public getKnownNodes_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<AtlasNodeInfo>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  AtlasNodeInfo _elem2 = new AtlasNodeInfo();
                  _elem2 = new AtlasNodeInfo();
                  _elem2.Read(iprot);
                  Success.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getKnownNodes_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (AtlasNodeInfo _iter3 in Success)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getKnownNodes_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class postMessage_args : TBase
  {
    private AtlasMessage _message;

    [DataMember]
    public AtlasMessage Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool message;
    }

    public postMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Message = new AtlasMessage();
              Message.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("postMessage_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Message != null && __isset.message) {
        field.Name = "message";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Message.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("postMessage_args(");
      sb.Append("Message: ");
      sb.Append(Message== null ? "<null>" : Message.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class postMessage_result : TBase
  {

    public postMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("postMessage_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("postMessage_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class registerMessageListing_args : TBase
  {
    private string _recipientKey;
    private long _messageId;

    [DataMember]
    public string RecipientKey
    {
      get
      {
        return _recipientKey;
      }
      set
      {
        __isset.recipientKey = true;
        this._recipientKey = value;
      }
    }

    [DataMember]
    public long MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool recipientKey;
      public bool messageId;
    }

    public registerMessageListing_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              RecipientKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              MessageId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("registerMessageListing_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RecipientKey != null && __isset.recipientKey) {
        field.Name = "recipientKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RecipientKey);
        oprot.WriteFieldEnd();
      }
      if (__isset.messageId) {
        field.Name = "messageId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MessageId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("registerMessageListing_args(");
      sb.Append("RecipientKey: ");
      sb.Append(RecipientKey);
      sb.Append(",MessageId: ");
      sb.Append(MessageId);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class registerMessageListing_result : TBase
  {

    public registerMessageListing_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("registerMessageListing_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("registerMessageListing_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class unregisterMessageListing_args : TBase
  {
    private long _messageId;

    [DataMember]
    public long MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool messageId;
    }

    public unregisterMessageListing_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              MessageId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("unregisterMessageListing_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.messageId) {
        field.Name = "messageId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MessageId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("unregisterMessageListing_args(");
      sb.Append("MessageId: ");
      sb.Append(MessageId);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class unregisterMessageListing_result : TBase
  {

    public unregisterMessageListing_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("unregisterMessageListing_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("unregisterMessageListing_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class getAuthChallenge_args : TBase
  {
    private string _publicKey;

    [DataMember]
    public string PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool publicKey;
    }

    public getAuthChallenge_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              PublicKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getAuthChallenge_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PublicKey != null && __isset.publicKey) {
        field.Name = "publicKey";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PublicKey);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getAuthChallenge_args(");
      sb.Append("PublicKey: ");
      sb.Append(PublicKey);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class getAuthChallenge_result : TBase
  {
    private string _success;

    [DataMember]
    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool success;
    }

    public getAuthChallenge_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getAuthChallenge_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getAuthChallenge_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class confirmAuth_args : TBase
  {
    private string _response;

    [DataMember]
    public string Response
    {
      get
      {
        return _response;
      }
      set
      {
        __isset.response = true;
        this._response = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool response;
    }

    public confirmAuth_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Response = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("confirmAuth_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Response != null && __isset.response) {
        field.Name = "response";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Response);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("confirmAuth_args(");
      sb.Append("Response: ");
      sb.Append(Response);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class confirmAuth_result : TBase
  {
    private long _success;

    [DataMember]
    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool success;
    }

    public confirmAuth_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I64) {
              Success = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("confirmAuth_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I64;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("confirmAuth_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class getListings_args : TBase
  {

    public getListings_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getListings_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getListings_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class getListings_result : TBase
  {
    private List<AtlasListing> _success;

    [DataMember]
    public List<AtlasListing> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool success;
    }

    public getListings_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<AtlasListing>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  AtlasListing _elem6 = new AtlasListing();
                  _elem6 = new AtlasListing();
                  _elem6.Read(iprot);
                  Success.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getListings_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (AtlasListing _iter7 in Success)
            {
              _iter7.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getListings_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class hasMessage_args : TBase
  {
    private long _id;

    [DataMember]
    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool id;
    }

    public hasMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("hasMessage_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("hasMessage_args(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class hasMessage_result : TBase
  {
    private long _success;

    [DataMember]
    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool success;
    }

    public hasMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I64) {
              Success = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("hasMessage_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I64;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("hasMessage_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class retrieveMessage_args : TBase
  {
    private long _id;

    [DataMember]
    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool id;
    }

    public retrieveMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("retrieveMessage_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("retrieveMessage_args(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class retrieveMessage_result : TBase
  {
    private AtlasMessage _success;

    [DataMember]
    public AtlasMessage Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool success;
    }

    public retrieveMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new AtlasMessage();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("retrieveMessage_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("retrieveMessage_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
